var searchIndex = new Map(JSON.parse('[["aclib",{"t":"CCCCCCCCQQQQQCCCCCCCHHHHHHHHHHHHHHHCCCHHHHHHHHHHHHHHHHCCCCCCCKMMNMMMCCFNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNCFNNNNNNNNNNNNNNNNNNNCCCCCCKFNNNMNMNMNNNNMNNNNNNCFNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNKFNNNNMNMNNNNMNNNNNNFNNNNNNNNNNNNNNNFNNNNNNNNNNNNCCCCFNNNNNNNNNNNNFNNNNNNNNNNNNNNFNNNNNNNNNNCCFNNNNNNNNNNNNFNNNNNNNNNCCHHCCCICCHCCHHHHCCCCCHHHCCCFNNNNNNNNNNNNNFGGGPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCCCCCCCCCFNNNNNNNNNNNNHHHHFONNNONNONNONNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNONNNNNNHHHHCCCHHHHHHCC","n":["algo","collections","cumsum","dic_order","graph","integer","knapsack","macros","max","mean","min","prod","sum","bisect","bound","compress","distance","inversion","sort","two_pointers","bisect","bisect_left","bisect_left_by_key","bisect_right","bisect_right_by_key","bisect_unit","initial_indices","log_ceil","log_floor","sqrt_ceil","sqrt_floor","bisect_right","lower_bound","upper_bound","coordinate_compress","hamming","levenshtein","manhattan_chebyshev","hamming_distance","levenshtein_distance","chebyshev_distance","chebyshev_distance_2d","manhattan_distance","manhattan_distance_2d","rotate_45","inversion_number","inversion_number_with","bubble_sort","heap_sort","insertion_sort","merge_sort","quick_sort","selection_sort","two_pointers","counter","heap","linkedlist","segtree","sorted_vec","trie_tree","unionfind","Counter","count","counted","from","most_common","new","remove","non_recursive","recursive","MinHeap","borrow","borrow_mut","down_heap","from","","into","len","new","peek","pop","push","try_from","try_into","type_id","up_heap","BHeapSet","borrow","borrow_mut","down_heap","from","","heapify","into","len","new","peek","pop","push","try_from","try_into","type_id","up_heap","singly","LinkedList","append","borrow","borrow_mut","dequeue","drop","enqueue","extend","from","into","is_empty","len","new","peek_head","peek_tail","pop","push","try_from","try_into","type_id","custom_tree","lazy_segtree","non_copy","non_recursive","recursive","segtree","Monoid","SegmentTree","bisect","borrow","borrow_mut","from","","identity","indices","into","","leaf_offset","len","new","operation","query","try_from","try_into","type_id","update","update_with","addtree","AddTree","borrow","borrow_mut","from","into","leaf_offset","new","num_of_leaf","propagation","query","recursive_query","recursive_update_range","try_from","try_into","type_id","update_range","SegmentTree","bisect_left","bisect_right","borrow","borrow_mut","from","","index","index_mut","into","leaf_offset","query","swap","try_from","try_into","type_id","update","update_parents","update_with","SegmentTree","bisect_left","bisect_right","borrow","borrow_mut","from","index","into","leaf_offset","new","num_of_leaf","query","swap","try_from","try_into","type_id","update","update_with","SegmentTree","bisect_left","bisect_right","borrow","borrow_mut","from","into","is_root","leaf_offset","left_child","new","num_of_leaf","parent","query","recursive_query","recursive_update","right_child","root","try_from","try_into","type_id","update","update_with","Monoid","SegmentTree","bisect","borrow","borrow_mut","from","identity","indices","into","","leaf_offset","len","new","operation","query","try_from","try_into","type_id","update","update_with","SortedVec","borrow","borrow_mut","extend","from","from_iter","index","insert","into","iter","max_elements","min_elements","new","try_from","try_into","type_id","TrieTree","borrow","borrow_mut","contains","fmt","from","insert","into","new","remove","try_from","try_into","type_id","merge_technique","smooth_unionfind","unionfind","with_petgraph","MergeTechnique","borrow","borrow_mut","find","from","into","new","same_group","size","try_from","try_into","type_id","union","UnionFind","borrow","borrow_mut","connected_components","equiv","find","from","into","new","root","size","try_from","try_into","type_id","union","UnionFind","borrow","borrow_mut","find","from","into","new","try_from","try_into","type_id","union","cumsum1d","imos1d","CumSum","borrow","borrow_mut","from","from_iter","","indices","interval_sum","into","try_from","try_into","type_id","with_data","Imos1D","borrow","borrow_mut","from","into","new","sum_timing","try_from","try_into","type_id","bfs","next_permutation","kth_dic_order","next_permutation","algo","with_petgraph","without_petgraph","NodeId","dijkstra","euler_tour","undirected_neighbors","one_to_many","one_to_one","dijkstra","from_to_indices","dijkstra","euler_tour","arbitrary","bipartite","diameter","grid","search","is_bipartite","diameter_of_tree","field_to_directed_grid","dijkstra","search","structure","MinHeapRecord","borrow","borrow_mut","cmp","compare","eq","equivalent","","from","into","partial_cmp","try_from","try_into","type_id","AdjacencyList","Directed","Undirected","Unweighted","Weight","Weighted","add_node","bfs","borrow","","","","","borrow_mut","","","","","dfs","dijkstra","","from","","","","","index","","into","","","","","neighbors","new_unweighted_directed","new_unweighted_undirected","new_weighted_directed","new_weighted_undirected","nodes_len","remove_node","try_from","","","","","try_into","","","","","type_id","","","","","weight","counting","devisors","gcd","interval_sieve","modint","modulo","prime","rational","sieve","sort","Counting","borrow","borrow_mut","combination","combination_with_repetition","factorial","from","into","new","permutation","try_from","try_into","type_id","devisors","devisors_pair","gcd_recursive","lcm_recursive","IntervalSieve","base","borrow","borrow_mut","from","interval","into","is_prime","l","new","primes","r","try_from","try_into","type_id","ModInt","add","add_assign","borrow","borrow_mut","clone","clone_into","clone_to_uninit","cmp","compare","eq","equivalent","","fmt","","from","into","mul","mul_assign","new","partial_cmp","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","ex_euclid","inverse_mod_mul","mod_pow","mod_pow_u64","factorization","fast_primes","Rational","add","add_assign","borrow","borrow_mut","clone","clone_into","clone_to_uninit","cmp","common","compare","div","div_assign","eq","equivalent","","fmt","","from","into","irreducible","mul","mul_assign","new","partial_cmp","sub","sub_assign","to_owned","to_string","try_from","try_into","type_id","SieveOfEratosthenes","all_factorization","borrow","borrow_mut","euler_phi","factorization","from","into","is_prime","min_primes","new","primes","sieve","try_from","try_into","type_id","counting_sorted","counting_sorted_with","radix_sorted","radix_sorted_with","dp","meet_in_the_middle","solver","dp_weight_with_backtrack","knapsack_dp_value","knapsack_dp_value_solve","knapsack_dp_weight","knapsack_half_enumerate","knapsack","compare","summation"],"q":[[0,"aclib"],[13,"aclib::algo"],[20,"aclib::algo::bisect"],[31,"aclib::algo::bound"],[34,"aclib::algo::compress"],[35,"aclib::algo::distance"],[38,"aclib::algo::distance::hamming"],[39,"aclib::algo::distance::levenshtein"],[40,"aclib::algo::distance::manhattan_chebyshev"],[45,"aclib::algo::inversion"],[47,"aclib::algo::sort"],[53,"aclib::algo::two_pointers"],[54,"aclib::collections"],[61,"aclib::collections::counter"],[68,"aclib::collections::heap"],[70,"aclib::collections::heap::non_recursive"],[86,"aclib::collections::heap::recursive"],[103,"aclib::collections::linkedlist"],[104,"aclib::collections::linkedlist::singly"],[124,"aclib::collections::segtree"],[130,"aclib::collections::segtree::custom_tree"],[151,"aclib::collections::segtree::lazy_segtree"],[152,"aclib::collections::segtree::lazy_segtree::addtree"],[168,"aclib::collections::segtree::non_copy"],[187,"aclib::collections::segtree::non_recursive"],[205,"aclib::collections::segtree::recursive"],[228,"aclib::collections::segtree::segtree"],[248,"aclib::collections::sorted_vec"],[264,"aclib::collections::trie_tree"],[277,"aclib::collections::unionfind"],[281,"aclib::collections::unionfind::merge_technique"],[294,"aclib::collections::unionfind::smooth_unionfind"],[309,"aclib::collections::unionfind::unionfind"],[320,"aclib::cumsum"],[322,"aclib::cumsum::cumsum1d"],[335,"aclib::cumsum::imos1d"],[345,"aclib::dic_order"],[347,"aclib::dic_order::bfs"],[348,"aclib::dic_order::next_permutation"],[349,"aclib::graph"],[352,"aclib::graph::algo"],[356,"aclib::graph::algo::dijkstra"],[358,"aclib::graph::algo::dijkstra::one_to_many"],[360,"aclib::graph::algo::dijkstra::one_to_one"],[361,"aclib::graph::algo::euler_tour"],[362,"aclib::graph::with_petgraph"],[367,"aclib::graph::with_petgraph::bipartite"],[368,"aclib::graph::with_petgraph::diameter"],[369,"aclib::graph::with_petgraph::grid"],[370,"aclib::graph::without_petgraph"],[373,"aclib::graph::without_petgraph::dijkstra"],[387,"aclib::graph::without_petgraph::structure"],[443,"aclib::integer"],[453,"aclib::integer::counting"],[466,"aclib::integer::devisors"],[468,"aclib::integer::gcd"],[470,"aclib::integer::interval_sieve"],[485,"aclib::integer::modint"],[513,"aclib::integer::modulo"],[517,"aclib::integer::prime"],[519,"aclib::integer::rational"],[551,"aclib::integer::sieve"],[567,"aclib::integer::sort"],[571,"aclib::knapsack"],[574,"aclib::knapsack::dp"],[578,"aclib::knapsack::meet_in_the_middle"],[579,"aclib::knapsack::solver"],[580,"aclib::macros"],[582,"core::option"],[583,"core::clone"],[584,"core::cmp"],[585,"core::ops::arith"],[586,"num_integer"],[587,"core::ops::range"],[588,"core::ops::function"],[589,"num_traits"],[590,"alloc::vec"],[591,"core::marker"],[592,"core::iter::traits::collect"],[593,"alloc::vec::into_iter"],[594,"core::result"],[595,"core::any"],[596,"core::cell"],[597,"num_traits::cast"],[598,"core::slice::index"],[599,"core::slice::iter"],[600,"core::hash"],[601,"core::fmt"],[602,"std::collections::hash::set"],[603,"std::collections::hash::map"],[604,"num_traits::identities"],[605,"num_traits::sign"],[606,"petgraph::graph_impl"],[607,"alloc::string"],[608,"core::convert"]],"i":"``````````````````````````````````````````````````````````````Cd00000```Cf00000000000000`Cl000000000000000``Cn000000000000000000````````Db00Dd101011110111111``Dh00000000000000`Dl00000000000000000`E`0000000000000000`Ed000000000000000000000``Ef000Eh1011110111111`Ej00000000000000`En00000000000`````Fh00000000000`Fl0000000000000`G`000000000```Gb00000000000`Gj00000000`````````````````````````````Hf000000000000````Hl`Hj0IbI`Hn432104333321043332104333333332104321043210433```````````Id00000000000`````Ih0000000000000`Ij00000000000000000000000000```````Jf000000000000000000000000000000`Jh00000000000000```````````````","f":"````````````````````{{eg}{{b{c}}}{dfhjl}{{n{c}}}{{Af{{A`{c}}}{{Ab{Ad}}}}}}{{{A`{{Ah{c}}}}c}Ajf}{{{A`{{Ah{c}}}}eg}Aj{}f{{Af{{A`{c}}}{{Ab{{A`{e}}}}}}}}10{{ecg}{{b{c}}}{dfhjAl}{{n{c}}}{{Af{{A`{c}}}{{Ab{Ad}}}}}}{{e{A`{g}}}{{An{cc}}}{dfhjAl}{{n{c}}}{{Af{{A`{c}}}{{Ab{Ad}}}}}}{{ec}c{dfhjl}{}}0{cc{dfhjl}}0555{{{A`{{Ah{c}}}}}{{B`{Aj}}}{BbBd}}```{{ee}AjBf{{Bj{}{{Bh{c}}}}}}{{{A`{{Ah{c}}}}{A`{{Ah{c}}}}}AjBl}{{{A`{{Ah{c}}}}{A`{{Ah{c}}}}}c{lBd}}{{{An{cc}}{An{cc}}}c{lBd}}10{{{A`{{Ah{{An{cc}}}}}}}{{B`{{An{cc}}}}}{lBd}}{{{A`{{Ah{Aj}}}}}Aj}{{{A`{{Ah{c}}}}}AjBb}{{{A`{Bn{Ah{c}}}}}C`f}00{{{A`{Bn{Ah{c}}}}}C`{fd}}1{{{A`{Bn{Ah{c}}}}}C`Bb}{{egi}{{Cb{{An{cc}}}}}d{{Bj{}{{Bh{c}}}}}{{Bj{}{{Bh{c}}}}}{{Af{{A`{c}}{A`{c}}}{{Ab{Ad}}}}}}````````{{{A`{BnCd}}c}C`{}}{{{A`{Cd}}c}Aj{}}{eCd{}{{Bj{}{{Bh{c}}}}}}{{{A`{Cd}}}{{B`{{An{cAj}}}}}{}}{{}Cd}{{{A`{BnCd}}{A`{c}}}C`{}}```{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{Bn{Cf{ceg}}}}Aj}C`{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{cc{}}{{{B`{c}}g}{{Cf{ceg}}}{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{{}c{}}{{{A`{{Cf{ceg}}}}}Aj{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{g{{Cf{ceg}}}{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{{{A`{{Cf{ceg}}}}}{{b{{A`{c}}}}}{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{{{A`{Bn{Cf{ceg}}}}}{{b{c}}}{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{{{A`{Bn{Cf{ceg}}}}c}C`{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj};`=<{{{A`{Bn{Cl{ceg}}}}Aj}C`{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}};{{{B`{c}}g}{{Cl{ceg}}}{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{{{A`{Bn{Cl{ceg}}}}}C`{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}};{{{A`{{Cl{ceg}}}}}Aj{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{g{{Cl{ceg}}}{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{{{A`{{Cl{ceg}}}}}{{b{{A`{c}}}}}{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{{{A`{Bn{Cl{ceg}}}}}{{b{c}}}{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}{{{A`{Bn{Cl{ceg}}}}c}C`{}Bb{{Af{{A`{c}}}{{Ab{e}}}}}}:987``{{{A`{Bn{Cn{c}}}}{A`{Bn{Cn{c}}}}}C`{}}{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{Bn{Cn{c}}}}}{{b{c}}}{}}{{{A`{Bn{Cn{c}}}}}C`{}}{{{A`{Bn{Cn{c}}}}c}C`{}}{{{A`{Bn{Cn{c}}}}e}C`{}{{Bj{}{{Bh{c}}}}}}{cc{}}{{}c{}}{{{A`{{Cn{c}}}}}Ad{}}{{{A`{{Cn{c}}}}}Aj{}}{{}{{Cn{c}}}{}}{{{A`{{Cn{c}}}}}{{b{{D`{c}}}}}{}}097{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}````````{{{A`{{Db{e}}}}giAd}{{b{Aj}}}{}{{Dd{c}}d}{{n{Aj}}}{{Af{{A`{c}}}{{Ab{Ad}}}}}}?>{cDd{}}:{{}Dd}{{{A`{{Db{c}}}}e}{{An{AjAj}}}{}{{n{Aj}}}}{Ddc{}}<{{{A`{{Db{c}}}}}Aj{}}0{{{A`{{Ah{c}}}}}{{Db{e}}}d{{Dd{c}}d}}{{{A`{Dd}}{A`{Dd}}}Dd}{{{A`{{Db{e}}}}g}e{}{{Dd{c}}d}{{n{Aj}}}};:9{{{A`{Bn{Db{e}}}}Ajc}e{}{{Dd{c}}d}}{{{A`{Bn{Db{e}}}}Ajg}e{}{{Dd{c}}d}{{Df{{A`{c}}}{{Ab{c}}}}}}``{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{cc{}}{{}c{}}{{{A`{{Dh{c}}}}}Aj{lDjBd}}{{{A`{{Ah{c}}}}}{{Dh{c}}}{lDjBd}}1{{{A`{Bn{Dh{c}}}}Aj}C`{lDjBd}}{{{A`{Bn{Dh{c}}}}AjAj}c{lDjBd}}{{{A`{Bn{Dh{c}}}}AjAjAjAjAj}c{lDjBd}}{{{A`{Bn{Dh{c}}}}AjAjAjAjAjc}C`{lDjBd}}{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}{{{A`{Bn{Dh{c}}}}AjAjc}C`{lDjBd}}`{{{A`{{Dl{ceg}}}}AjAji}{{b{Aj}}}{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}{{Af{{A`{c}}}{{Ab{Ad}}}}}}0>={{{B`{c}}eg}{{Dl{cge}}}{}{{Af{}{{Ab{c}}}}}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}}={{{A`{{Dl{ceg}}}}i}{{A`{k}}}{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}{{Dn{{Ah{c}}}}}{}}{{{A`{Bn{Dl{ceg}}}}i}{{A`{Bnk}}}{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}{{Dn{{Ah{c}}}}}{}}>{{{A`{{Dl{ceg}}}}}Aj{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}}{{{A`{{Dl{ceg}}}}AjAj}c{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}}{{{A`{Bn{Dl{ceg}}}}AjAj}C`{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}}:98{{{A`{Bn{Dl{ceg}}}}Ajc}c{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}}{{{A`{Bn{Dl{ceg}}}}Aj}C`{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}}{{{A`{Bn{Dl{ceg}}}}Aji}c{}{{Af{{A`{c}}{A`{c}}}{{Ab{c}}}}}{{Af{}{{Ab{c}}}}}{{Df{{A`{c}}}{{Ab{c}}}}}}`{{{A`{{E`{c}}}}AjAje}{{b{Aj}}}Bd{{Af{c}{{Ab{Ad}}}}}}0{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{cc{}}{{{A`{{E`{c}}}}e}{{A`{g}}}Bd{{Dn{{Ah{c}}}}}{}}{{}c{}}{{{A`{{E`{c}}}}}AjBd}{{{A`{{Ah{c}}}}c{Eb{cc}{{Ab{c}}}}}{{E`{c}}}Bd}1{{{A`{{E`{c}}}}AjAj}cBd}{{{A`{Bn{E`{c}}}}AjAj}C`Bd}{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}{{{A`{Bn{E`{c}}}}Ajc}cBd}{{{A`{Bn{E`{c}}}}Aje}cBd{{Df{c}{{Ab{c}}}}}}`{{{A`{{Ed{c}}}}AjAje}{{b{Aj}}}Bd{{Af{c}{{Ab{Ad}}}}}}0>=<:{AjAd}{{{A`{{Ed{c}}}}}AjBd}{AjAj}{{{A`{{Ah{c}}}}c{Eb{cc}{{Ab{c}}}}}{{Ed{c}}}Bd}21{{{A`{{Ed{c}}}}AjAj}cBd}{{{A`{{Ed{c}}}}AjAjAjAjAj}cBd}{{{A`{Bn{Ed{c}}}}Aj}C`Bd}4{{}Aj}=<;{{{A`{Bn{Ed{c}}}}Ajc}C`Bd}{{{A`{Bn{Ed{c}}}}Aje}C`Bd{{Df{c}{{Ab{c}}}}}}``{{{A`{{Ef{e}}}}giAd}{{b{Aj}}}{}{{Eh{c}}d}{{n{Aj}}}{{Af{{A`{c}}}{{Ab{Ad}}}}}}{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{cc{}}{{}Eh}{{{A`{{Ef{c}}}}e}{{An{AjAj}}}{}{{n{Aj}}}}{Ehc{}}{{}c{}}{{{A`{{Ef{c}}}}}Aj{}}0{{{A`{{Ah{c}}}}}{{Ef{e}}}d{{Eh{c}}d}}{{{A`{Eh}}{A`{Eh}}}Eh}{{{A`{{Ef{e}}}}g}c{}{{Eh{c}}d}{{n{Aj}}}}{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}{{{A`{Bn{Ef{e}}}}Ajc}c{}{{Eh{c}}d}}{{{A`{Bn{Ef{e}}}}Ajg}c{}{{Eh{c}}d}{{Df{{A`{c}}}{{Ab{c}}}}}}`?>{{{A`{Bn{Ej{c}}}}e}C`Bb{{Bj{}{{Bh{c}}}}}}>{e{{Ej{c}}}Bb{{Bj{}{{Bh{c}}}}}}{{{A`{{Ej{c}}}}e}{{A`{g}}}Bb{{Dn{{Ah{c}}}}}{}}{{{A`{Bn{Ej{c}}}}c}C`Bb}={{{A`{{Ej{c}}}}}{{El{c}}}Bb}{{{A`{{Ej{c}}}}Aj}{{A`{{Ah{c}}}}}Bb}0{{}{{Ej{c}}}Bb};:9`{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{{En{c}}}}e}Ad{F`Bfd}{{Bj{}{{Bh{c}}}}}}{{{A`{{En{c}}}}{A`{BnFb}}}FdFf}{cc{}}{{{A`{Bn{En{c}}}}e}Ad{F`Bfd}{{Bj{}{{Bh{c}}}}}}{{}c{}}{{}{{En{c}}}{F`Bfd}}2{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}`````:9{{{A`{BnFh}}Aj}Aj}75{AjFh}{{{A`{BnFh}}Aj}{{A`{{Fj{Aj}}}}}}2543{{{A`{BnFh}}AjAj}Ad}`>={{{A`{BnFl}}}{{Fn{Aj{B`{Aj}}}}}}{{{A`{Fl}}AjAj}Ad}{{{A`{BnFl}}Aj}Aj}=;{AjFl}{{{A`{Fl}}Aj}Aj}0;:9{{{A`{BnFl}}AjAj}Ad}`{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{G`}}Aj}Aj}{cc{}}{{}c{}}{AjG`}{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}{{{A`{BnG`}}AjAj}Aj}```986{e{{Gb{c}}}{}{{Bj{}{{Bh{c}}}}}}{e{{Gb{c}}}{d{Gd{}{{Ab{}}}}{Gf{}{{Ab{}}}}Gh}{{Bj{}{{Bh{{A`{c}}}}}}}}{{{A`{{Gb{c}}}}e}{{An{AjAj}}}{d{Gd{}{{Ab{}}}}{Gf{}{{Ab{}}}}Gh}{{n{Aj}}}}{{{A`{{Gb{c}}}}e}c{d{Gd{}{{Ab{}}}}{Gf{}{{Ab{}}}}Gh}{{n{Aj}}}}9765{e{{Gb{g}}}{}{{Bj{}{{Bh{c}}}}}{d{Gd{}{{Ab{}}}}{Gf{}{{Ab{}}}}Gh}}`>=;:{{{A`{{Ah{{An{AjAjc}}}}}}{b{Aj}}}{{Gj{c}}}{}}{{{A`{{Gj{c}}}}Aj}c{{Gd{}{{Ab{}}}}{Gf{}{{Ab{}}}}hjGhBd}}:98``{{{A`{{Ah{c}}}}Aj}{{B`{c}}}{dF`BfBb}}{{{A`{Bn{Ah{c}}}}}AdBb}``````{{Aj{A`{{Ah{{An{AjAj}}}}}}}{{Fn{Aj{Fj{Aj}}}}}}``{{{A`{{Fn{c{B`{{An{ce}}}}}}}}gk}{{Fn{ci}}}{dBbBfF`}{}{{n{c}}}{dGdBbGl}{{Af{i{A`{e}}}{{Ab{i}}}}}}{{{A`{{Fn{c{B`{e}}}}}}g}{{An{c{b{c}}}}}{dBbBfF`}{}{{n{c}}}}{{{A`{{Fn{c{B`{{An{ce}}}}}}}}cci}{{b{g}}}{dBbBfF`}{}{dGdBbGl}{{Af{g{A`{e}}}{{Ab{g}}}}}}{{{A`{{Fn{Aj{Fj{Aj}}}}}}Aj}{{An{{B`{Aj}}{B`{Aj}}}}}}`````{{Aj{A`{{Ah{{An{AjAj}}}}}}}Ad}{{{A`{{Gn{ce}}}}}Aj{}{}}{{{An{AjAj}}{A`{{Ah{{B`{H`}}}}}}}{{An{{Hb{C`Aj}}{Fn{{An{AjAj}}Hd}}}}}}````{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{{Hf{c}}}}{A`{{Hf{c}}}}}HhBb}{{A`{A`{c}}}Hh{}}{{{A`{{Hf{c}}}}{A`{{Hf{c}}}}}Ad{BlBb}}{{A`{A`{c}}}Ad{}}0{cc{}}{{}c{}}{{{A`{{Hf{c}}}}{A`{{Hf{c}}}}}{{b{Hh}}}Bb}{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}``````{{{A`{Bn{Hj{ce}}}}}Aj{}{}}{{{A`{{Hj{ce}}}}Aj}{{B`{Aj}}}{}{}}=====<<<<<0{{{A`{{Hj{{Hl{c}}e}}}}AjAj}{{An{{b{c}}{B`{Aj}}}}}{BdGdBbGh}{}}{{{A`{{Hj{Hnc}}}}AjAj}{{An{{b{e}}{B`{Aj}}}}}{}{BdBbGl}}99999{{{A`{{Hj{ce}}}}Aj}{{A`{g}}}{}{}{}}{{{A`{{Hj{{Hl{c}}e}}}}{An{AjAj}}}{{A`{g}}}Bd{}{}}:::::{{{A`{{Hj{ce}}}}Aj}{{A`{{Fj{Aj}}}}}{}{}}{{{An{AjAj}}{A`{{Ah{{An{AjAj}}}}}}}{{Hj{HnI`}}}}{{{An{AjAj}}{A`{{Ah{{An{AjAj}}}}}}}{{Hj{HnIb}}}}{{{An{AjAj}}{A`{{Ah{{An{AjAjc}}}}}}}{{Hj{{Hl{c}}I`}}}Bd}{{{An{AjAj}}{A`{{Ah{{An{AjAjc}}}}}}}{{Hj{{Hl{c}}Ib}}}Bd}{{{A`{{Hj{ce}}}}}Aj{}{}}{{{A`{Bn{Hj{ce}}}}Aj}{{b{{Fj{Aj}}}}}{}{}}?????>>>>>====={{{A`{{Hj{{Hl{c}}e}}}}AjAj}cBd{}}```````````{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{{Id{c}}}}AjAj}c{lBdDj}}0{{{A`{{Id{c}}}}Aj}c{lBdDj}}{cc{}}{{}c{}}{{Ajc}{{Id{c}}}{lBdDj}}4{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}{c{{B`{c}}}{lIfGlBd}}{c{{B`{{An{cc}}}}}{lIfGlBd}}{{{A`{{B`{c}}}}}c{lBd}}0`{IhB`}=<908{{{A`{Ih}}Aj}Ad}{IhAj}{{AjAj}Ih}{{{A`{Ih}}}{{B`{Aj}}}}2:98`{{{Ij{c}}{Ij{c}}}e{lBd}{}}{{{A`{Bn{Ij{c}}}}{Ij{c}}}C`{lBd}}{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{{Ij{c}}}}}{{Ij{c}}}{dlBd}}{{A`{A`{Bnc}}}C`{}}{{A`Il}C`}{{{A`{{Ij{c}}}}{A`{{Ij{c}}}}}Hh{BblBd}}{{A`{A`{c}}}Hh{}}{{{A`{{Ij{c}}}}{A`{{Ij{c}}}}}Ad{BllBd}}{{A`{A`{c}}}Ad{}}0{{{A`{{Ij{c}}}}{A`{BnFb}}}Fd{FflBd}}{{{A`{{Ij{c}}}}{A`{BnFb}}}Fd{InlBd}}{cc{}}{{}c{}}{{{Ij{c}}{Ij{c}}}e{lBd}{}}>{{cc}{{Ij{c}}}{lBd}}{{{A`{{Ij{c}}}}{A`{{Ij{c}}}}}{{b{Hh}}}{flBd}}{{{Ij{c}}{Ij{c}}}e{lBd}{}}{{{A`{Bn{Ij{c}}}}{Ij{c}}}C`{lBd}}{A`c{}}{A`J`}{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}{{cc}{{An{{An{cc}}c}}}{lJbBd}}{{cc}{{b{c}}}{lJbBd}}{{ccc}c{lBd}}{{JdJdJd}Jd}{Jd{{Fn{JdAj}}}}{Aj{{B`{Aj}}}}`{{{Jf{c}}{Jf{c}}}e{lBd}{}}{{{A`{Bn{Jf{c}}}}{Jf{c}}}C`{lBd}}{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{{Jf{c}}}}}{{Jf{c}}}{dlBd}}{{A`{A`{Bnc}}}C`{}}{{A`Il}C`}{{{A`{{Jf{c}}}}{A`{{Jf{c}}}}}Hh{BblBd}}{{{A`{{Jf{c}}}}{A`{{Jf{c}}}}}{{An{{Jf{c}}{Jf{c}}}}}{lBd}}{{A`{A`{c}}}Hh{}}{{{Jf{c}}{Jf{c}}}e{lBd}{}}9{{{A`{{Jf{c}}}}{A`{{Jf{c}}}}}Ad{lBd}}{{A`{A`{c}}}Ad{}}0{{{A`{{Jf{c}}}}{A`{BnFb}}}Fd{FflBd}}{{{A`{{Jf{c}}}}{A`{BnFb}}}Fd{InlBd}}{cc{}}{{}c{}}{{{A`{{Jf{c}}}}}{{Jf{c}}}{lBd}}{{{Jf{c}}{Jf{c}}}e{lBd}{}}{{{A`{Bn{Jf{c}}}}{Jf{c}}}C`{lBd}}{{cc}{{b{{Jf{c}}}}}{lBd}}{{{A`{{Jf{c}}}}{A`{{Jf{c}}}}}{{b{Hh}}}{lBd}}{{{Jf{c}}{Jf{c}}}e{lBd}{}}3{A`c{}}{A`J`}{c{{Ch{e}}}{}{}}{{}{{Ch{c}}}{}}{A`Cj}`{{{A`{Jh}}}{{B`{{Fn{AjAj}}}}}}{A`{{A`{c}}}{}}{{{A`{Bn}}}{{A`{Bnc}}}{}}{{{A`{Jh}}Aj}Aj}{{{A`{Jh}}Aj}{{Fn{AjAj}}}}{cc{}}{{}c{}}{{{A`{Jh}}Aj}Ad}{JhB`}{AjJh}{{{A`{Jh}}}{{B`{Aj}}}}{{{A`{Jh}}}{{B`{Ad}}}}>=<{{{A`{{Ah{c}}}}}{{B`{c}}}{{Jj{Aj}}Bd}}{{{A`{{Ah{c}}}}e}{{B`{{A`{c}}}}}{}{{Af{{A`{c}}}{{Ab{Aj}}}}}}10```{{AjAj{A`{{Ah{Aj}}}}{A`{{Ah{c}}}}}{{B`{Aj}}}{lBd}}{{Ajc{A`{{Ah{c}}}}{A`{{Ah{Aj}}}}}{{B`{{B`{{b{c}}}}}}}{lBd}}{{Ajc{A`{{Ah{c}}}}{A`{{Ah{Aj}}}}}Aj{lBd}}{{AjAj{A`{{Ah{Aj}}}}{A`{{Ah{c}}}}}{{B`{{B`{c}}}}}{lBd}}{{Ajc{A`{{Ah{c}}}}{A`{{Ah{e}}}}}e{lBdF`}{lBd}}{{Ajc{A`{{Ah{c}}}}{A`{{Ah{e}}}}}e{l{Jj{Aj}}{Jl{Aj}}BdF`}{lDj{Jj{Aj}}Bd}}``","D":"BDd","p":[[6,"Option",582,null,1],[10,"Clone",583],[10,"PartialOrd",584],[10,"AddAssign",585],[10,"SubAssign",585],[10,"Integer",586],[10,"RangeBounds",587],[1,"reference",null,null,1],[17,"Output"],[1,"bool"],[10,"Fn",588],[1,"slice"],[1,"usize"],[10,"Num",589],[1,"tuple",null,null,1],[5,"Vec",590],[10,"Ord",584],[10,"Copy",591],[10,"Eq",584],[17,"Item"],[10,"IntoIterator",592],[10,"PartialEq",584],[0,"mut"],[1,"unit"],[5,"IntoIter",593],[10,"Counter",61],[5,"MinHeap",70],[6,"Result",594,null,1],[5,"TypeId",595],[5,"BHeapSet",86],[5,"LinkedList",104],[5,"Ref",596],[5,"SegmentTree",130],[10,"Monoid",130],[10,"FnOnce",588],[5,"AddTree",152],[10,"NumCast",597],[5,"SegmentTree",168],[10,"SliceIndex",598],[5,"SegmentTree",187],[1,"fn"],[5,"SegmentTree",205],[5,"SegmentTree",228],[10,"Monoid",228],[5,"SortedVec",248],[5,"Iter",599],[5,"TrieTree",264],[10,"Hash",600],[5,"Formatter",601],[8,"Result",601],[10,"Debug",601],[5,"MergeTechnique",281],[5,"HashSet",602],[5,"UnionFind",294],[5,"HashMap",603],[5,"UnionFind",309],[5,"CumSum",322],[10,"Add",585],[10,"Sub",585],[10,"Zero",604],[5,"Imos1D",335],[10,"Unsigned",605],[8,"UnGraph",606],[1,"char"],[5,"Graph",606],[5,"NodeIndex",606],[5,"MinHeapRecord",373],[6,"Ordering",584],[5,"AdjacencyList",387],[6,"Weighted",387],[6,"Unweighted",387],[6,"Directed",387],[6,"Undirected",387],[5,"Counting",453],[10,"ToPrimitive",597],[5,"IntervalSieve",470],[5,"ModInt",485],[1,"u8"],[10,"Display",601],[5,"String",607],[10,"Signed",605],[1,"u64"],[5,"Rational",519],[5,"SieveOfEratosthenes",551],[10,"AsPrimitive",597],[10,"Into",608,null,1]],"r":[],"b":[[326,"impl-FromIterator%3CT%3E-for-CumSum%3CT%3E"],[327,"impl-FromIterator%3C%26T%3E-for-CumSum%3CT%3E"],[406,"impl-AdjacencyList%3CWeighted%3CW%3E,+D%3E"],[407,"impl-AdjacencyList%3CUnweighted,+D%3E"],[413,"impl-Index%3Cusize%3E-for-AdjacencyList%3CW,+D%3E"],[414,"impl-Index%3C(usize,+usize)%3E-for-AdjacencyList%3CWeighted%3CW%3E,+D%3E"],[498,"impl-Debug-for-ModInt%3CT%3E"],[499,"impl-Display-for-ModInt%3CT%3E"],[535,"impl-Debug-for-Rational%3CT%3E"],[536,"impl-Display-for-Rational%3CT%3E"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAACQBPwABAAcADgAGACQAAgA3AAcARQAEAFMAAgBXAAIAZAACAGgAAQBrAAEAegAKAIYAAQCTAAIAmAADAKUAAgCpAAAArAABALYAAgC8AAAAvwABAMkAAgDOAAAA0QABAOAAAgDlAAEA6AABAPQAAgD6AAEABgEFAA0BAAATAQUAGgECACMBAgAnAQIAMgECADYBAgA9AQIAQQEEAEwBAgBQAQIAVwEEAF4BCABoAQAAbAEDAHMBCgCAAQMAhQEEAIwBCQCsAQ4AvAEMANABAgDYAQIA3AEAAN8BAADiARIA9wEKAAgCEQAcAgsAKgIBADECAAA1AgIAPAICAEQCAgA=","P":[[20,"T,R,F"],[21,"T"],[22,"T,U,K"],[23,"T"],[24,"T,U,K"],[25,"T,R,F"],[27,"P,T"],[29,"T"],[38,"T,I"],[39,"T"],[45,""],[46,"T"],[53,"T,Ia,Ib,F"],[62,"T"],[64,"T,I"],[65,"T"],[66,""],[67,"T"],[73,"T,U,F"],[74,"T"],[75,"T,U,F"],[76,"U"],[77,"T,U,F"],[82,"U,T"],[83,"U"],[84,""],[85,"T,U,F"],[87,"T"],[89,"T,U,F"],[90,"T"],[91,"T,U,F"],[93,"U"],[94,"T,U,F"],[99,"U,T"],[100,"U"],[101,""],[102,"T,U,F"],[105,"T"],[111,"T,I"],[112,"T"],[113,"U"],[114,"T"],[121,"U,T"],[122,"U"],[123,""],[132,"T,M,R,F"],[133,"T"],[137,""],[138,"M,R"],[139,"T"],[140,"U"],[141,"M"],[143,"T,M"],[144,""],[145,"T,M,R"],[146,"U,T"],[147,"U"],[148,""],[149,"T,M"],[150,"T,M,U"],[153,"T"],[156,"U"],[157,"T"],[164,"U,T"],[165,"U"],[166,""],[167,"T"],[169,"T,F,E,C"],[171,"T"],[173,"T,E,F"],[174,"T"],[175,"T,F,E,I,Index::Output"],[177,"U"],[178,"T,F,E"],[181,"U,T"],[182,"U"],[183,""],[184,"T,F,E"],[186,"T,F,E,U"],[188,"T,F"],[190,"T"],[193,"T,I,Index::Output"],[194,"U"],[195,"T"],[200,"U,T"],[201,"U"],[202,""],[203,"T"],[204,"T,U"],[206,"T,F"],[208,"T"],[211,"U"],[212,""],[213,"T"],[214,""],[215,"T"],[217,""],[218,"T"],[221,""],[223,"U,T"],[224,"U"],[225,""],[226,"T"],[227,"T,U"],[230,"T,M,R,F"],[231,"T"],[234,""],[235,"M,R"],[236,"T"],[237,"U"],[238,"M"],[240,"T,M"],[241,""],[242,"T,M,R"],[243,"U,T"],[244,"U"],[245,""],[246,"T,M"],[247,"T,M,U"],[249,"T"],[251,"T,I"],[252,"T"],[253,"T,I"],[254,"T,I,Index::Output"],[255,"T"],[256,"U"],[257,"T"],[261,"U,T"],[262,"U"],[263,""],[265,"T"],[267,"E,K"],[268,"E"],[269,"T"],[270,"E,K"],[271,"U"],[272,"E"],[273,"E,K"],[274,"U,T"],[275,"U"],[276,""],[282,"T"],[284,""],[285,"T"],[286,"U"],[287,""],[290,"U,T"],[291,"U"],[292,""],[295,"T"],[297,""],[300,"T"],[301,"U"],[302,""],[305,"U,T"],[306,"U"],[307,""],[310,"T"],[312,""],[313,"T"],[314,"U"],[315,""],[316,"U,T"],[317,"U"],[318,""],[323,"T"],[326,"T,I"],[328,"T,R"],[330,"U"],[331,"U,T"],[332,"U"],[333,""],[334,"Ii,I,T"],[336,"T"],[339,"U"],[340,"T"],[342,"U,T"],[343,"U"],[344,""],[347,"T"],[355,""],[358,"N,W,R,C,F"],[359,"N,Nei,R"],[360,"N,W,C,F"],[361,""],[368,"N,E"],[369,""],[374,"T"],[376,"W"],[377,"K"],[378,"W"],[379,"K"],[381,"T"],[382,"U"],[383,"W"],[384,"U,T"],[385,"U"],[386,""],[393,"W,D"],[395,"T"],[405,"W,D"],[407,"D,T"],[408,"T"],[413,"W,D,Index::Output"],[415,"U"],[420,"W,D"],[421,""],[423,"W"],[425,"W,D"],[427,"U,T"],[432,"U"],[437,""],[442,"W,D"],[454,"T"],[460,"U"],[461,"T"],[463,"U,T"],[464,"U"],[465,""],[466,"T"],[471,""],[472,"T"],[475,""],[476,"U"],[477,""],[482,"U,T"],[483,"U"],[484,""],[486,"T,Add::Output"],[487,"T"],[492,""],[493,"T"],[494,"K"],[495,"T"],[496,"K"],[498,"T"],[501,"U"],[502,"T,Mul::Output"],[503,"T"],[506,"T,Sub::Output"],[507,"T"],[509,""],[510,"U,T"],[511,"U"],[512,""],[513,"T"],[516,""],[520,"T,Add::Output"],[521,"T"],[526,""],[527,"T"],[529,"K"],[530,"T,Div::Output"],[531,"T"],[533,"K"],[535,"T"],[538,"U"],[539,"T"],[540,"T,Mul::Output"],[541,"T"],[544,"T,Sub::Output"],[545,"T"],[547,""],[548,"U,T"],[549,"U"],[550,""],[553,"T"],[555,""],[557,"T"],[558,"U"],[559,""],[564,"U,T"],[565,"U"],[566,""],[567,"T"],[568,"T,F"],[569,"T"],[570,"T,F"],[574,"V"],[575,"W"],[577,"V"],[578,"W,V"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[25844]}